//Рассмотрим простой вариант задачи RMQ (Range Minimum Query, запрос минимума на подмассиве).
//
//        Задан массив из n целых чисел (a1, a2,..., an) и m запросов вида (li, ri) (1 ≤ li ≤ ri ≤ n).
//        Ваша задача — на каждый запрос вывести минимальный среди элементов с индексами от li до ri включительно.
//
//        Входные данные
//        В первой строке входного файла дано число n (1 ≤ n ≤ 100) — количество чисел в массиве. Во второй строке через пробел записаны целые числа
//        a1, a2,..., an (1 ≤ ai ≤ 100). В третьей строке входного файла дано число m (1 ≤ m ≤ 100) — количество запросов.
//        Далее в m строках даны запросы по одному на строке в виде двух целых чисел li, ri, разделенных пробелом (1 ≤ li ≤ ri ≤ n).
//
//        Выходные данные
//        Выведите m чисел — ответы на запросы. Числа разделяйте пробелом или переводом строки. На запросы следуюет отвечать в том порядке, в котором они заданы во входных данных.

package arrays;

import java.util.Scanner;

public class Ex2025 {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }
        int rmq = sc.nextInt();
        for (int i = 0; i < rmq; i++) {
            int l = sc.nextInt();
            int r = sc.nextInt();
            int min = 101;
            for (int j = l - 1; j < r; j++) {
                if (arr[j] < min) {
                    min = arr[j];
                }
            }
            System.out.println(min);
        }
    }
}
